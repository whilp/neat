:mod:`neat` --- WSGI, neat
==========================

.. automodule:: neat

Installing :mod:`neat`
----------------------

.. highlight:: none

You can install the latest stable version of :mod:`neat` using :command:`pip`::
    
    $ pip install neat

Mirrors of the project's repository are hosted at `github.com`_ and `bitbucket.org`_
-- feel free to clone and issue pull requests at either service. For `git`_
users::

    $ git clone http://github.com/wcmaier/neat.git

.. _github.com:     http://github.com/wcmaier/neat.git
.. _bitbucket.org:  http://bitbucket.org/lt_kije/neat/
.. _git:            http://git-scm.com/

And for `Mercurial`_ users::

    $ hg clone http://bitbucket.org/lt_kije/neat/

.. _Mercurial:  http://mercurial.selenic.com/

Both github and bitbucket provide feeds of changes to the project; for example::

    http://github.com/wcmaier/neat/commits/master.atom

If you'd like to contribute an improvement to :mod:`neat`, please consider using
either of the above services. Otherwise, send an email to willmaier@ml1.net.

A quick tour of :mod:`neat`'s features
-------------------------------------------

.. highlight:: python

Hello world::
    
    >>> from neat import Resource, Dispatch
    >>> from webob import Request

    >>> class Hello(Resource):
    ...     collection = "hello"
    ...
    ...     def retrieve(self, req, name):
    ...         return "Hello, %s" % name

    >>> service = Dispatch(Hello())
    >>> req = Request.blank("/hello/you")
    >>> req.get_response(service).body
    'Hello, you'

Easily add support for new media types::

    >>> import json
    >>> class JsonHello(Hello):
    ...
    ...     mimetypes = {"application/javascript": "json"}
    ...
    ...     def retrieve_json(self, req, name):
    ...         req.response.content_type = "application/json"
    ...         return json.dumps({"message": self.retrieve(req, name)})
    ...

    >>> service = Dispatch(JsonHello("hello"))
    >>> req = Request.blank("/hello/you")
    >>> req.get_response(service).body
    '{"message": "Hello, you"}'


Basic usage
-----------

:mod:`neat` is a simple framework for modeling and representing resources
via HTTP. This approach takes full advantage of the structure of the
web, described by Roy Fielding in his famous `REST`_ paper. :mod:`neat`
applications include a single :class:`~neat.neat.Dispatch` that combines any
number of resources (usually subclasses of :class:`~neat.neat.Resource`).
When a :class:`~neat.neat.Dispatch` receives a HTTP request, it routes the
request to :class:`~neat.neat.Resource` methods using rules defined by the
:class:`~neat.neat.Resource` itself. The :class:`~neat.neat.Resource` methods
then interact with the data or state of the actual resource (for example, a
database) and return a representation of the current state to the client.
:class:`~neat.neat.Resource` can support a variety of representations (like
JSON, HTML, CSV, XML), so the framework chooses the representation that best
matches the HTTP request's Content header.

.. _REST:   http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm

.. note::
    The rules for routing requests and choosing representation formats are all
    defined by the :class:`~neat.neat.Resource`, so different resources may define
    different rules. If the default rules don't suit you, simply override
    :meth:`~neat.neat.Resource.match`.

API
---

Here's the API.

.. automodule:: neat.neat
    :members:
    :show-inheritance:

Developing :mod:`neat`
----------------------

Updating README
+++++++++++++++

Both Github and bitbucket format README files written in restructured text.
Unfortunately, they don't use the same algorithm to determine which format the
README is written in (or which of several READMEs should be presented on the
project overview page). The following procedure keeps everything in sync and
should happen at least once per release::

    $ cd docs
    $ make text
    $ cp _build/text/index.txt ../README ../README.rst
    $ hg ci -m "Sync README."

Syncing with github and bitbucket
+++++++++++++++++++++++++++++++++

Even though all development of :mod:`neat` occurs in a Mercurial
repository, it's useful to provide a git mirror on Github, the very popular
hosting service. This mirror (as well as the Mercurial mirror on bitbucket) is
kept in sync using Mercurial `hooks`_ and `hg-git`_. First, a local mirror is
created of the main Mercurial repository::

    $ hg clone -U . .mirror

The mirror clone does not need to have a working directory, so the :option:`-U`
flag is passed to the clone subcommand. Then, the main repository's default path
is set to point to the local mirror::
	
    $ cat <<EOF >| .hg/hgrc
    [paths]
    default = .mirror
    EOF

Finally, the mirror is configured to push to the hosting services every time it
receives a new changegroup (ie, when we push from the master to the mirror)::

    $ cat <<EOF >| .mirror/.hg/hgrc
    [paths]
    github = git+ssh://git@github.com/wcmaier/neat.git
    bitbucket = ssh://hg@bitbucket.org/lt_kije/neat

    [hooks]
    changegroup.updatemaster = hg bookmark -f -r default master
    changegroup.bitbucket = hg push bitbucket
    changegroup.github = hg push github
    EOF

Now, when new changesets are pushed to the mirror, it will update the 'master'
bookmark and push to Github and bitbucket. It is important to update the master
bookmark before attempting to push to a git repository because Mercurial
bookmarks (which hg-git uses to compare against the git master revision) are not
updated when the mirror repository receives a push.

.. _hooks:      http://www.selenic.com/mercurial/hgrc.5.html#hooks
.. _hg-git:     http://hg-git.github.com/

Running the tests
+++++++++++++++++

:mod:`neat` ships with a number of unit tests that help ensure that the
code runs correctly. The tests live in the :mod:`tests` package and can be run
by ``setup.py``::
    
    $ python setup.py test

All new code in :mod:`neat` should be accompanied by unit and/or functional
tests. You can get a sense for how completely the unit tests exercise
:mod:`neat` by running the coverage_ tool::

    $ coverage run --branch setup.py test

``coverage`` tracks the code statements and branches that the test suite
touches and can generate a report listing the lines of code that are
missed::

    $ coverage report -m --omit "tests,/home/will/lib,lib/cli/ext,setup"

It's useful to omit the third party code directory (``ext``) as well as
the path to the Python standard library as well as ``setup.py`` and the
tests themselves.

.. _coverage:   http://nedbatchelder.com/code/coverage/
